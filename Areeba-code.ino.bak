#include <avr/pgmspace.h>
#include <Arduino.h>

const uint8_t ledPin = 0;        // One LED for brightness sync
const uint8_t buzzerPin = 1;     // Piezo buzzer

const char melody[] PROGMEM =
  "Underworld:d=16,o=6,b=160:8e6,8e6,8e6,8c6,8e6,8g6,8g5,8c6,8g5,8e5,8a5,8b5,8a#5,8a5,8g5";

// --- RTTTL Note Playback with LED Sync ---
void playRTTTL(const char *p) {
  while (*p != ':') p++; p++; // Skip name
  while (*p != ':') p++; p++; // Skip defaults

  while (*p) {
    int duration = 0;
    while (isdigit(*p)) duration = duration * 10 + (*p++ - '0');
    if (!duration) duration = 4;

    int note = 0;
    switch (*p++) {
      case 'c': note = 1; break;
      case 'd': note = 3; break;
      case 'e': note = 5; break;
      case 'f': note = 6; break;
      case 'g': note = 8; break;
      case 'a': note = 10; break;
      case 'b': note = 12; break;
      default: note = 0;
    }

    if (*p == '#') { note++; p++; }
    bool dotted = false;
    if (*p == '.') { dotted = true; p++; }

    int octave = 6;
    if (isdigit(*p)) octave = *p++ - '0';
    if (*p == ',') p++;

    int wholenote = (60000 * 4) / 160; // b=160
    int noteDuration = wholenote / duration;
    if (dotted) noteDuration += noteDuration / 2;

    int freq = noteFreq(note, octave);
    if (note) {
      tone(buzzerPin, freq, noteDuration);

      // Map frequency to brightness (100–1000 Hz → 0–255)
      int brightness = map(freq, 100, 1000, 0, 255);
      brightness = constrain(brightness, 0, 255);

      unsigned long start = millis();
      while (millis() - start < noteDuration) {
        analogWrite(ledPin, brightness);
        delay(10);
      }
    } else {
      analogWrite(ledPin, 0);
      delay(noteDuration);
    }

    noTone(buzzerPin);
  }
}

int noteFreq(int note, int octave) {
  static const float A4 = 440.0;
  int n = (octave - 4) * 12 + note - 10;
  return (int)(A4 * pow(2.0, n / 12.0));
}

void setup() {
  pinMode(ledPin, OUTPUT);
  pinMode(buzzerPin, OUTPUT);
  delay(500);
  playRTTTL(melody);
}

void loop() {
  // After song, optionally loop or stay idle
}
